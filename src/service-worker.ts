/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { BackgroundSyncPlugin } from "workbox-background-sync";
import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst, StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith(".png"),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

registerRoute(
  ({ url }) => {
    return `https://${url.host}` === "https://dummyjson.com";
  },
  new NetworkFirst({
    cacheName: "dummyjson-api",
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
// const bgSyncPlugin = new BackgroundSyncPlugin("PATCH-que", {
//   maxRetentionTime: 24 * 60,
// });

// registerRoute(
//   ({ url }) => {
//     return `https://${url.host}` === supabaseUrl
//   },
//   new NetworkOnly({
//     plugins: [bgSyncPlugin],
//   }),
//   "PATCH"
// );

const showSkipWaitingPrompt = async (event: any) => {
  // Assuming the user accepted the update, set up a listener
  // that will reload the page as soon as the previously waiting
  // service worker has taken control.
  self.addEventListener("controlling", () => {
    // At this point, reloading will ensure that the current
    // tab is loaded under the control of the new service worker.
    // Depending on your web app, you may want to auto-save or
    // persist transient state before triggering the reload.
    window.location.reload();
  });

  // When `event.wasWaitingBeforeRegister` is true, a previously
  // updated service worker is still waiting.
  // You may want to customize the UI prompt accordingly.

  // This code assumes your app has a promptForUpdate() method,
  // which returns true if the user wants to update.
  // Implementing this is app-specific; some examples are:
  // https://open-ui.org/components/alert.research or
  // https://open-ui.org/components/toast.research
  const updateAccepted = confirm("Update app?");

  if (updateAccepted) {
    // wb.messageSkipWaiting();
    // messageSW()
    event.postMessage({ type: "SKIP_WAITING" });
  }
};

// Add an event listener to detect when the registered
// service worker has installed but is waiting to activate.
self.addEventListener("waiting", (event) => {
  showSkipWaitingPrompt(event);
});
